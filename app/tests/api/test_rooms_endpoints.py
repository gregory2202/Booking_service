from httpx import AsyncClient
from pytest import mark


@mark.parametrize("hotel_id, date_from, date_to, status_code, expected_rooms_left", [
    # До любого бронирования
    (3, "2023-09-26", "2023-09-27", 200, {5: 1, 6: 2}),

    # Оба экземпляра комнаты 6 заняты бронированием, комната 5 свободна
    (3, "2023-09-29", "2023-09-30", 200, {5: 1, 6: 0}),

    # Только одна комната 6 освободилась, другая все еще занята, комната 5 свободна
    (3, "2023-10-02", "2023-10-04", 200, {5: 1, 6: 1}),

    # Только комната 5 занята бронированием, комнаты 6 свободны
    (3, "2023-10-06", "2023-10-08", 200, {5: 0, 6: 2}),

    # Бронирование на "граничные" дни занятости
    (3, "2023-10-04", "2023-10-05", 200, {5: 0, 6: 2}),

    # Бронирование, охватывающее время занятости других бронирований.
    (3, "2023-09-27", "2023-10-12", 200, {5: 0, 6: 0}),

    # Бронирование для несуществующего отеля
    (4, "2023-09-27", "2023-10-12", 404, {}),

    # Начальная дата после окончательной даты
    (1, "2023-09-24", "2023-09-21", 400, {}),

    # Начальная дата после окончательной даты
    (1, "2023-10-21", "2023-09-21", 400, {}),

    # Слишком долгое бронирование (более 30 дней)
    (1, "2023-09-01", "2023-10-20", 400, {}),

    # Слишком долгое бронирование (31 день)
    (1, "2023-09-01", "2023-10-02", 400, {}),

    # После окончания всех бронирований
    (3, "2023-10-12", "2023-10-15", 200, {5: 1, 6: 2}),
])
async def test_get_rooms_by_date(async_client: AsyncClient, hotel_id: int, date_from: str, date_to: str,
                                 status_code: int, expected_rooms_left: dict):
    response = await async_client.get(f"/hotels/{hotel_id}/rooms", params={"date_from": date_from, "date_to": date_to})
    assert response.status_code == status_code

    if status_code == 200:
        for room in response.json():
            room_id = room.get("id")
            rooms_left = room.get("rooms_left")
            assert rooms_left == expected_rooms_left.get(room_id)
